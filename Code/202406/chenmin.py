#-*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtCore import QTimer
import subprocess
from tkinter import Button
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
from video_thread import video_handler
import psutil
from multiprocessing import Process
import os
from functools import partial
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.directory = "/mnt/Data/"
        #self.inference_command = ["python", "inference-tool.py", "-i", self.directory, self.directory[:-1] +"_output"]
        # self.inference_command = [
        #     "bash", "run_inference.sh", self.directory, f"{self.directory[:-1]}_output"
        # ]
        self.isPreview = 0
        self.isRecord = 0
        self.vhpid = 0
        self.recordtime = 0
        self.timer=QTimer()
        self.timer.timeout.connect(self.showtime)
        self.record_pid = []
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1036, 598)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Button_list = QtWidgets.QVBoxLayout()
        self.Button_list.setSpacing(6)
        self.Button_list.setObjectName("Button_list")
        self.preview_button = QtWidgets.QPushButton(self.centralwidget)
        self.preview_button.setObjectName("preview_button")
        font = QtGui.QFont()
        font.setPointSize(30)
        self.preview_button.setFont(font)
        self.preview_button.clicked.connect(self.previewButton)
        self.Button_list.addWidget(self.preview_button)
        self.Time_list = QtWidgets.QGridLayout()
        self.Time_list.setObjectName("Time_list")
        self.hour_text = QtWidgets.QLabel(self.centralwidget)
        self.hour_text.setObjectName("hour_text")
        self.hour_text.setFont(font)
        self.Time_list.addWidget(self.hour_text, 0, 0, 1, 1)
        self.minute_text = QtWidgets.QLabel(self.centralwidget)
        self.minute_text.setObjectName("minute_text")
        self.minute_text.setFont(font)
        self.Time_list.addWidget(self.minute_text, 1, 0, 1, 1)
        self.minute_input = QtWidgets.QLineEdit(self.centralwidget)
        self.minute_input.setObjectName("minute_input")
        self.minute_input.setValidator(QtGui.QIntValidator())
    
        self.minute_input.setFont(font)
        self.Time_list.addWidget(self.minute_input, 1, 1, 1, 1)
        self.hour_input = QtWidgets.QLineEdit(self.centralwidget)
        self.hour_input.setObjectName("hour_input")
        self.hour_input.setValidator(QtGui.QIntValidator())
        self.hour_input.setFont(font)
        self.Time_list.addWidget(self.hour_input, 0, 1, 1, 1)
        self.second_text = QtWidgets.QLabel(self.centralwidget)
        self.second_text.setObjectName("second_text")
        self.second_text.setFont(font)
        self.Time_list.addWidget(self.second_text, 2, 0, 1, 1)
        self.second_input = QtWidgets.QLineEdit(self.centralwidget)
        self.second_input.setObjectName("second_input")
        self.second_input.setValidator(QtGui.QIntValidator())
        self.second_input.setFont(font)
        self.Time_list.addWidget(self.second_input, 2, 1, 1, 1)
        self.Time_list.setColumnStretch(0, 1)
        self.Time_list.setRowStretch(0, 1)
        self.Time_list.setRowStretch(1, 1)
        self.Time_list.setRowStretch(2, 1)
        self.Button_list.addLayout(self.Time_list)
        self.record_button = QtWidgets.QPushButton(self.centralwidget)
        self.record_button.setObjectName("record_button")
        self.record_button.clicked.connect(self.recordButton)
        self.record_button.setFont(font)
        self.Button_list.addWidget(self.record_button)
        self.explore_button = QtWidgets.QPushButton(self.centralwidget)
        self.explore_button.setMinimumSize(QtCore.QSize(0, 0))
        self.explore_button.setObjectName("explore_button")
        self.explore_button.clicked.connect(self.openFolder)
        self.explore_button.setFont(font)
        self.Button_list.addWidget(self.explore_button)
        self.esc_button = QtWidgets.QPushButton(self.centralwidget)
        self.esc_button.setObjectName("esc_button")
        self.esc_button.clicked.connect(self.quitButton)
        self.esc_button.setFont(font)
        self.Button_list.addWidget(self.esc_button)
        self.Button_list.setStretch(0, 2)
        self.Button_list.setStretch(1, 2)
        self.Button_list.setStretch(2, 1)
        self.Button_list.setStretch(3, 2)
        self.Button_list.setStretch(4, 2)
        self.horizontalLayout.addLayout(self.Button_list)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.video_3 = QtWidgets.QWidget(self.centralwidget)
        self.video_3.setStyleSheet("background-color:rgb(245, 245, 245);")
        self.video_3.setObjectName("video_3")
        self.gridLayout.addWidget(self.video_3, 1, 0, 1, 1)
        self.video_1 = QtWidgets.QWidget(self.centralwidget)
        self.video_1.setAutoFillBackground(False)
        self.video_1.setStyleSheet("background-color:rgb(245, 245, 245);")
        self.video_1.setObjectName("video_1")
        self.gridLayout.addWidget(self.video_1, 0, 0, 1, 1)
        self.video_2 = QtWidgets.QWidget(self.centralwidget)
        self.video_2.setStyleSheet("background-color:rgb(245, 245, 245);")
        self.video_2.setObjectName("video_2")
        self.gridLayout.addWidget(self.video_2, 0, 1, 1, 1)
        self.video_4 = QtWidgets.QWidget(self.centralwidget)
        self.video_4.setStyleSheet("background-color:rgb(245, 245, 245);")
        self.video_4.setObjectName("video_4")
        self.gridLayout.addWidget(self.video_4, 1, 1, 1, 1)
        self.horizontalLayout.addLayout(self.gridLayout)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 5)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    

        
    def quitButton(self):
        app = QApplication.instance()
        app.quit()
    def previewButton(self):
        if (self.isPreview==0):
            p = subprocess.Popen(["bash","./three.sh"],shell=False)
            x = psutil.Process(p.pid)
            while (len(x.children())==0):
                pass
            self.vhpid = x.children()[0].pid
            print("pidis....."+str(self.vhpid))
            self.record_button.setEnabled(False)
            self.esc_button.setEnabled(False)
            self.explore_button.setEnabled(False)
            self.isPreview = 1
        else:
            print(self.vhpid)
            self.isPreview = 0
            subprocess.Popen(["kill", "-9", str(self.vhpid)])
            self.record_button.setEnabled(True)
            self.esc_button.setEnabled(True)
            self.explore_button.setEnabled(True)
            print("close gst")
    def recordButton(self):
        if self.isRecord==0:
            if (self.second_input.text()!=''):
                second = int(self.second_input.text())
            else:
                second = 0
            if (self.minute_input.text()!=''):
                minute = int(self.minute_input.text())
            else:
                minute = 0
            if (self.hour_input.text()!=''):
                hour = int(self.hour_input.text())
            else:
                hour = 0
            self.recordtime = second + minute*60 + hour*60*60
            self.start_inference()
            if self.recordtime == 0:

                for i in range(4):
                     p = subprocess.Popen(["bash","./video0_split.sh",str(i), self.directory],shell=False)
                     x = psutil.Process(p.pid)
                     while (len(x.children())==0):
                        pass
                     self.record_pid.append(x.children()[0].pid)
                self.preview_button.setEnabled(False)
                self.esc_button.setEnabled(False)
                self.explore_button.setEnabled(False)
                self.isRecord=2
                
                print("noinput mode")
            else:
                print("begin record")
                self.begintimer()
                for i in range(4):
                     p = subprocess.Popen(["bash","./video0_split.sh",str(i)],shell=False)
                     x = psutil.Process(p.pid)
                     while (len(x.children())==0):
                        pass
                     self.record_pid.append(x.children()[0].pid)
                self.preview_button.setEnabled(False)
                self.esc_button.setEnabled(False)
                self.explore_button.setEnabled(False)
                self.isRecord=1
            
        #end record        
        else:
            self.isRecord=0
            self.timesup()
    def start_inference(self):

        print(self.directory)
        command_start = f'gnome-terminal -- /bin/bash -c "cd /home/ubuntu/chenminUI ; python ./inference-tool.py -i "/media/ubuntu/Data/test" "/media/ubuntu/Data/test_output""'
        ps = subprocess.Popen(command_start,shell= False, executable='/bin/bash')

        print("Inference process started in a new process with PID: ", ps.pid)
        #print("Inference process started in a new shell with PID: ", ps.pid)
        
    def openFolder(self):
        self.directory = QtWidgets.QFileDialog.getExistingDirectory(None,"getExistingDirectory", "~/") 

            
    def showtime(self):
        self.recordtime = self.recordtime - 1
        m, s = divmod(self.recordtime, 60)
        h, m = divmod(m, 60)
        self.hour_input.setText(str(h))
        self.minute_input.setText(str(m))
        self.second_input.setText(str(s))
        #print(self.recordtime)
        if self.recordtime == 0:
            print("timesup or stop record")
            self.timesup()
            self.isRecord=0
    def begintimer(self):
        self.hour_input.setReadOnly(True)
        self.minute_input.setReadOnly(True)
        self.second_input.setReadOnly(True)
        self.timer.start(1000)
        
    def timesup(self):
        self.hour_input.setReadOnly(False)
        self.minute_input.setReadOnly(False)
        self.second_input.setReadOnly(False)
        self.preview_button.setEnabled(True)
        self.esc_button.setEnabled(True)
        self.explore_button.setEnabled(True)
        self.hour_input.setText('')
        self.minute_input.setText('')
        self.second_input.setText('')
        for  pid in self.record_pid:
            subprocess.Popen(["kill", "-2", str(pid)])
        self.record_pid = []
        self.timer.stop()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.preview_button.setText(_translate("MainWindow", "Preview"))
        self.record_button.setText(_translate("MainWindow", "Record & Analyze"))
        self.hour_text.setText(_translate("MainWindow", "Hours:"))
        self.minute_text.setText(_translate("MainWindow", "Minutes:"))
        self.second_text.setText(_translate("MainWindow", "Seconds:"))
        self.explore_button.setText(_translate("MainWindow", "Explore Folder"))
        self.esc_button.setText(_translate("MainWindow", "Exit"))



